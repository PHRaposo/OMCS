; OM File Header - Saved 2021/07/29 18:31:07
; (6.2 :patc (om-make-point 110 142) (om-make-point 0 0) (om-make-point 664 524) "" 183 0 "2021/07/19 21:43:39" "2021/07/29 18:05:42")
; End File Header
(in-package :om)(load-lib-for (quote ("OMCS")))(setf *om-current-persistent* (om-load-patch1 "10-atleast property" (quote ((let ((box (om-load-boxcomment "comment" (om-make-point 219 69) (quote "From Mikael Laurson's  PWConstraints manual p.60-61") nil (om-make-point 420 215) nil (om-make-color 0 0 0) (om-make-font "Liberation Sans" 12 :family "Liberation Sans" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 216 50) (quote "At-least property") "" (om-make-point 201 34) nil (om-make-color 0 0 0) (om-make-font "Liberation Sans" 24.0D0 :family "Liberation Sans" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote abstraction) "no adjascent dups" (om-load-patch-abs1 "no adjascent dups" (quote ((let ((box (om-load-boxin "input 2" 1 (om-make-point 174 37) "" nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "input" 0 (om-make-point 124 36) "" nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "/=" (quote /=) (quote ((om-load-inputfun (quote input-funbox) "NUM" "NUM" nil) (om-load-inputfun (quote input-funbox) "add-input" "add-input" nil))) (om-make-point 150 112) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxout "output" 0 (om-make-point 143 165) (quote ((om-load-inputfun (quote input-funbox) "" "out" nil))) nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box))) (quote ((1 0 2 0 nil 0) (0 0 2 1 nil 0) (2 0 3 0 nil 0))) 6.2 nil "" (om-make-point 0 0) (om-make-point 330 304)) (quote ((om-load-inputfun (quote input-funbox) "" "input" nil) (om-load-inputfun (quote input-funbox) "" "input 2" nil))) (om-make-point 301 107) nil (list nil) "l" "no adjascent dups"))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote abstraction) "atleast check" (om-load-patch-abs1 "atleast check" (quote ((let ((box (om-load-boxcall (quote bastype) "list" (quote list) (quote nil) (om-make-point 201 91) (om-make-point 67 30) (list (list 3 0) (list 2 1)) "((3 0) (2 1))" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "CUR-SLEN" (quote omcs::cur-slen) (quote nil) (om-make-point 152 78) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "PARTIAL-SOLUTION" (quote omcs::partial-solution) (quote nil) (om-make-point 73 45) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "ATLEAST-CNT-CHECK" (quote omcs::atleast-cnt-check) (quote ((om-load-inputfun (quote input-funbox) "L" "L" nil) (om-load-inputfun (quote input-funbox) "TOTAL-LEN" "TOTAL-LEN" nil) (om-load-inputfun (quote input-funbox) "ATLEAST-CNT-ITEM-LST" "ATLEAST-CNT-ITEM-LST" nil))) (om-make-point 128 145) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxout "output" 0 (om-make-point 154 200) (quote ((om-load-inputfun (quote input-funbox) "" "out" nil))) nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box))) (quote ((2 0 3 0 nil 0) (1 0 3 1 nil 0) (0 0 3 2 nil 0) (3 0 4 0 nil 0))) 6.2 nil "" (om-make-point 0 0) (om-make-point 335 295)) (quote nil) (om-make-point 224 107) nil (list nil) "l" "atleast check"))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "WILDCARD-RULE 2" (quote omcs::wildcard-rule) (quote ((om-load-inputfun (quote input-funbox) "function" "FUNCTION" nil))) (om-make-point 313 185) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "WILDCARD-RULE" (quote omcs::wildcard-rule) (quote ((om-load-inputfun (quote input-funbox) "function" "FUNCTION" nil))) (om-make-point 224 184) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "LIST" (quote list) (quote ((om-load-inputfun (quote input-funbox) "add-input" "add-input" nil) (om-load-inputfun (quote input-funbox) "add-input" "add-input" nil))) (om-make-point 287 266) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 3" (quote t) (quote nil) (om-make-point 180 189) (om-make-point 26 30) 6 "6" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 2" (quote t) (quote nil) (om-make-point 111 189) (om-make-point 61 30) (list 0 1 2 3) "(0 1 2 3)" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "REPEAT-N" (quote repeat-n) (quote ((om-load-inputfun (quote input-funbox) "something" "SELF" nil) (om-load-inputfun (quote input-funbox) "times" "N" 0))) (om-make-point 138 228) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux" (quote t) (quote nil) (om-make-point 368 273) (om-make-point 33 30) (quote :all) ":all" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "PMC-ENGINE" (quote omcs::pmc-engine) (quote ((om-load-inputfun (quote input-funbox) "s-space" "S-SPACE" nil) (om-load-inputfun (quote input-funbox) "rules" "RULES" nil) (om-load-inputkeyword (quote input-keyword) "sols-mode" "sols-mode" (quote :sols-mode) (quote :once) nil))) (om-make-point 130 322) (om-make-point 335 75) nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box))) (quote ((2 0 4 0 nil 0) (3 0 5 0 nil 0) (5 0 6 0 nil 0) (4 0 6 1 nil 0) (8 0 9 0 nil 0) (7 0 9 1 nil 0) (9 0 11 0 nil 0) (6 0 11 1 nil 0) (10 0 11 2 nil 0))) nil 6.2))
