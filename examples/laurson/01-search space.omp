; OM File Header - Saved 2021/07/29 18:31:07
; (6.2 :patc (om-make-point 24 20) (om-make-point 0 0) (om-make-point 632 371) "" 183 0 "2021/07/18 14:27:16" "2021/07/28 13:53:41")
; End File Header
(in-package :om)(load-lib-for (quote ("OMCS")))(setf *om-current-persistent* (om-load-patch1 "01-search space" (quote ((let ((box (om-load-boxcall (quote bastype) "aux 5" (quote t) (quote nil) (om-make-point 277 195) (om-make-point 30 30) nil "nil" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 60 34) (quote "Rules= $nil") nil (om-make-point 262 152) nil (om-make-color 0 0 0) (om-make-font "Liberation Sans" 12 :family "Liberation Sans" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 77 29) (quote "rnd? =$nil") nil (om-make-point 421 150) nil (om-make-color 0 0 0) (om-make-font "Liberation Sans" 12 :family "Liberation Sans" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 77 29) (quote "sols-mode =$all solutions") nil (om-make-point 333 149) nil (om-make-color 0 0 0) (om-make-font "Liberation Sans" 12 :family "Liberation Sans" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 276 43) (quote "Search Space (no rules)") "" (om-make-point 184 14) nil (om-make-color 0 0 0) (om-make-font "Liberation Sans" 24.0D0 :family "Liberation Sans" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 126 31) (quote "SEARCH SPACE") "" (om-make-point 152 73) nil (om-make-color 0 0 0) (om-make-font "Liberation Sans" 12 :family "Liberation Sans" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 4" (quote t) (quote nil) (om-make-point 425 191) (om-make-point 30 30) nil "nil" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 3" (quote t) (quote nil) (om-make-point 350 194) (om-make-point 33 30) (quote :all) ":all" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 2" (quote t) (quote nil) (om-make-point 224 110) (om-make-point 26 30) 3 "3" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux" (quote t) (quote nil) (om-make-point 165 109) (om-make-point 52 30) (list 1 2 3) "(1 2 3)" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "REPEAT-N" (quote repeat-n) (quote ((om-load-inputfun (quote input-funbox) "something" "SELF" nil) (om-load-inputfun (quote input-funbox) "times" "N" 0))) (om-make-point 194 156) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "PMC-ENGINE" (quote omcs::pmc-engine) (quote ((om-load-inputfun (quote input-funbox) "s-space" "S-SPACE" nil) (om-load-inputfun (quote input-funbox) "rules" "RULES" nil) (om-load-inputkeyword (quote input-keyword) "sols-mode" "sols-mode" (quote :sols-mode) (quote :once) nil) (om-load-inputkeyword (quote input-keyword) "random?" "rnd?" (quote :rnd?) (quote t) nil))) (om-make-point 142 234) (om-make-point 368 75) nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box))) (quote ((9 0 10 0 nil 0) (8 0 10 1 nil 0) (10 0 11 0 nil 0) (0 0 11 1 nil 0) (7 0 11 2 nil 0) (6 0 11 3 nil 0))) nil 6.2))
