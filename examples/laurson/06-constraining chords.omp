; OM File Header - Saved 2021/07/29 18:31:07
; (6.2 :patc (om-make-point 105 80) (om-make-point 0 0) (om-make-point 665 694) "" 183 0 "2021/07/18 14:53:15" "2021/07/29 18:08:58")
; End File Header
(in-package :om)(load-lib-for (quote ("OMCS")))(setf *om-current-persistent* (om-load-patch1 "06-constraining chords" (quote ((let ((box (om-load-boxcomment "comment" (om-make-point 166 82) (quote "Twelve tone row chord with only fourth and augmented fourth intervals") nil (om-make-point 438 567) nil (om-make-color 0 0 0) (om-make-font "Liberation Sans" 12 :family "Liberation Sans" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 126 31) (quote "SEARCH SPACE") "" (om-make-point 77 130) nil (om-make-color 0 0 0) (om-make-font "Liberation Sans" 12 :family "Liberation Sans" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 237 47) (quote "Constraining chords") "" (om-make-point 200 6) nil (om-make-color 0 0 0) (om-make-font "Liberation Sans" 24.0D0 :family "Liberation Sans" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 188 42) (quote "- - - - - - - - - - RULES - - - - - - - - -  ") "" (om-make-point 212 68) nil (om-make-color 0 0 0) (om-make-font "Liberation Sans" 12 :family "Liberation Sans" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "CHORD-SEQ" (quote chord-seq) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "pitches (mc): list or list of lists" "lmidic" (list 6000)) (om-load-inputfun (quote input-funbox) "onsets (ms): list" "lonset" (list 0 300)) (om-load-inputfun (quote input-funbox) "durations (ms): list or list of lists" "ldur" (list 1000)) (om-load-inputfun (quote input-funbox) "velocities (0-127): list or list of lists" "lvel" (list 100)) (om-load-inputfun (quote input-funbox) "offsets (ms): list or list of lists" "loffset" (list 0)) (om-load-inputfun (quote input-funbox) "MIDI channels (1-16): list or list of lists" "lchan" (list 1)) (om-load-inputfun (quote input-funbox) "relative chords duration (0-100)" "legato" 0))) (om-make-point 166 521) (om-make-point 262 186) (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((2400) (3000) (3500) (4100) (4600) (5200) (5700) (6300) (6800) (7400) (7900) (8500))) :lonset (quote (0 300 600 900 1200 1500 1800 2100 2400 2700 3000 3300 4300)) :ldur (quote ((1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000))) :lvel (quote ((100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100))) :loffset (quote ((0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0))) :lchan (quote ((1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1))) :legato 0)))) (load-port-info newobj (quote ((0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0)))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote ((nil (om-load-patch-abs1 "patch" (quote nil) (quote nil) 6.2 nil "" (om-make-point 200 200) (om-make-point 400 500)))))) (set-name newobj nil) (set-tonalite newobj nil) newobj) nil nil (pairlis (quote (approx fontsize staff cmnpref deltapict outport inport player zoom notechancolor? grillestep mode winsize winpos score-mode obj-mode cursor-mode show-stems scale)) (list 2 24 (quote ggff) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (om-make-point 0 0) nil nil (quote :midi-player) 1 nil 1000 0 (om-make-point 855 487) (om-make-point 0 0) 0 1 (quote :normal) (quote t) nil)) t nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "CAR" (quote car) (quote ((om-load-inputfun (quote input-funbox) "X" "X" nil))) (om-make-point 290 422) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux" (quote t) (quote nil) (om-make-point 331 426) (om-make-point 38 30) 100 "100" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "OM*" (quote om*) (quote ((om-load-inputfun (quote input-funbox) "number or list" "ARG1" 0) (om-load-inputfun (quote input-funbox) "number or list" "ARG2" 0))) (om-make-point 314 472) (om-make-point 23 35) nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote abstraction) "Intvl rule" (om-load-patch-abs1 "Intvl rule" (quote ((let ((box (om-load-boxcall (quote bastype) "aux" (quote t) (quote nil) (om-make-point 197 162) (om-make-point 43 30) (list 5 6) "(5 6)" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "-" (quote -) (quote ((om-load-inputfun (quote input-funbox) "NUM" "NUM" nil) (om-load-inputfun (quote input-funbox) "add-input" "add-input" nil))) (om-make-point 144 124) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "MEMBER" (quote member) (quote ((om-load-inputfun (quote input-funbox) "ITEM" "ITEM" nil) (om-load-inputfun (quote input-funbox) "LIST" "LIST" nil))) (om-make-point 169 192) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxout "output" 0 (om-make-point 173 256) (quote ((om-load-inputfun (quote input-funbox) "" "out" nil))) nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "input 2" 1 (om-make-point 101 48) "" nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "input" 0 (om-make-point 194 42) "" nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box))) (quote ((4 0 1 0 nil 0) (5 0 1 1 nil 0) (1 0 2 0 nil 0) (0 0 2 1 nil 0) (2 0 3 0 nil 0))) 6.2 nil "" (om-make-point 0 0) (om-make-point 364 316)) (quote ((om-load-inputfun (quote input-funbox) "" "input" nil) (om-load-inputfun (quote input-funbox) "" "input 2" nil))) (om-make-point 335 108) nil (list nil) "l" "Intvl rule"))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "WILDCARD-RULE" (quote omcs::wildcard-rule) (quote ((om-load-inputfun (quote input-funbox) "function" "FUNCTION" nil))) (om-make-point 323 187) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 6" (quote t) (quote nil) (om-make-point 172 170) (om-make-point 32 30) 12 "12" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 5" (quote t) (quote nil) (om-make-point 121 171) (om-make-point 43 30) (list 5 6) "(5 6)" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 4" (quote t) (quote nil) (om-make-point 81 172) (om-make-point 32 30) 24 "24" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "MAKE-NOTE-RANGES" (quote omcs::make-note-ranges) (quote ((om-load-inputfun (quote input-funbox) "START" "START" nil) (om-load-inputfun (quote input-funbox) "INTS" "INTS" nil) (om-load-inputfun (quote input-funbox) "CARD" "CARD" nil))) (om-make-point 93 219) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "LIST" (quote list) (quote ((om-load-inputfun (quote input-funbox) "add-input" "add-input" nil) (om-load-inputfun (quote input-funbox) "add-input" "add-input" nil))) (om-make-point 263 273) (om-make-point 87 43) nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote abstraction) "no PC dup" (om-load-patch-abs1 "no PC dup" (quote ((let ((box (om-load-boxcall (quote bastype) "aux 2" (quote t) (quote nil) (om-make-point 274 93) (om-make-point 32 30) 12 "12" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "MOD 2" (quote mod) (quote ((om-load-inputfun (quote input-funbox) "X" "X" nil) (om-load-inputfun (quote input-funbox) "Y" "Y" nil))) (om-make-point 260 123) nil nil "l" nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux" (quote t) (quote nil) (om-make-point 127 96) (om-make-point 32 30) 12 "12" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "MOD" (quote mod) (quote ((om-load-inputfun (quote input-funbox) "X" "X" nil) (om-load-inputfun (quote input-funbox) "Y" "Y" nil))) (om-make-point 113 126) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "NOT" (quote not) (quote ((om-load-inputfun (quote input-funbox) "X" "X" nil))) (om-make-point 196 249) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "MEMBER" (quote member) (quote ((om-load-inputfun (quote input-funbox) "ITEM" "ITEM" nil) (om-load-inputfun (quote input-funbox) "LIST" "LIST" nil) (om-load-inputkeyword (quote input-keyword) "" "key" (quote :key) nil nil))) (om-make-point 145 186) (om-make-point 133 43) nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "input" 0 (om-make-point 78 39) "" nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "CDR" (quote cdr) (quote ((om-load-inputfun (quote input-funbox) "X" "X" nil))) (om-make-point 200 122) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "REV-PARTIAL-SOLUTION" (quote omcs::rev-partial-solution) (quote nil) (om-make-point 167 26) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxout "output" 0 (om-make-point 189 302) (quote ((om-load-inputfun (quote input-funbox) "" "out" nil))) nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box))) (quote ((0 0 1 1 nil 0) (6 0 3 0 nil 0) (2 0 3 1 nil 0) (5 0 4 0 nil 0) (3 0 5 0 nil 0) (7 0 5 1 nil 0) (1 0 5 2 nil 0) (8 0 7 0 nil 0) (4 0 9 0 nil 0))) 6.2 nil "" (om-make-point 0 0) (om-make-point 457 418)) (quote ((om-load-inputfun (quote input-funbox) "" "input" nil))) (om-make-point 247 106) nil (list nil) "l" "no PC dup"))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "WILDCARD-RULE" (quote omcs::wildcard-rule) (quote ((om-load-inputfun (quote input-funbox) "function" "FUNCTION" nil))) (om-make-point 240 188) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 3" (quote t) (quote nil) (om-make-point 378 288) (om-make-point 33 30) (quote :all) ":all" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "PMC-ENGINE" (quote omcs::pmc-engine) (quote ((om-load-inputfun (quote input-funbox) "s-space" "S-SPACE" nil) (om-load-inputfun (quote input-funbox) "rules" "RULES" nil) (om-load-inputkeyword (quote input-keyword) "sols-mode" "sols-mode" (quote :sols-mode) (quote :once) nil))) (om-make-point 163 339) (om-make-point 283 75) nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box))) (quote ((7 0 4 1 nil 0) (18 0 5 0 nil 0) (5 0 7 0 nil 0) (6 0 7 1 nil 0) (8 0 9 0 nil 0) (12 0 13 0 nil 0) (11 0 13 1 nil 0) (10 0 13 2 nil 0) (16 0 14 0 nil 0) (9 0 14 1 nil 0) (15 0 16 0 nil 0) (13 0 18 0 nil 0) (14 0 18 1 nil 0) (17 0 18 2 nil 0))) nil 6.2))
